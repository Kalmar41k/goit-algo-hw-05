"""
Модуль для аналізу тексту та виявлення дійсних чисел.

Цей модуль містить дві основні функції: `generator_numbers` та `sum_profit`. 
Вони призначені для пошуку дійсних чисел у рядку тексту та обчислення їх загальної суми відповідно.

Функції:
    generator_numbers(text: str) -> Generator[float, None, None]:
        Генератор, що ітерує по всіх дійсних числах у тексті.
        
    sum_profit(text: str, func: Callable[[str], float]) -> float:
        Обчислює загальну суму чисел у вхідному рядку, використовуючи заданий генератор чисел.
"""
import re
from typing import Callable, Generator

def generator_numbers(text: str) -> Generator[float, None, None]:
    """
    Генератор, що ітерує по всіх дійсних числах у тексті.

    Дійсні числа у тексті мають бути чітко відокремлені пробілами з обох боків.

    Args:
        text (str): Вхідний рядок, що містить текст для аналізу.

    Yields:
        float: Знайдені дійсні числа у тексті.
    """
    # Регулярний вираз для пошуку дійсних чисел, відокремлених пробілами
    pattern = r'(?<=\s)-?\d+(\.\d+)?(?=\s)'

    # Пошук всіх чисел у тексті та генерація значень
    for match in re.finditer(pattern, text):
        yield float(match.group())

def sum_profit(text: str, func: Callable[[str], float]) -> float:
    """
    Обчислює загальну суму чисел у вхідному рядку, використовуючи заданий генератор чисел.

    Args:
        text (str): Вхідний рядок, що містить текст для аналізу.
        func (Callable[[str], float]): Функція-генератор, яка генерує числа з тексту.

    Returns:
        float: Загальна сума всіх чисел, знайдених у тексті.
    """
    return sum(func(text))

text = "Загальний дохід працівника складається з декількох частин: \
    1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів."
total_income = sum_profit(text, generator_numbers)
print(f"Загальний дохід: {total_income}")
